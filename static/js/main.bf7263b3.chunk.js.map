{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visibilityFilter.js","reducers/index.js","configureStore.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","index.js"],"names":["initialState","isFetching","todos","state","action","type","map","todo","id","completed","fetchTodos","dispatch","fetch","then","response","json","receiveTodos","VisibilityFilters","visibilityFilter","filter","combineReducers","loggerMiddleware","createLogger","Link","active","children","onClick","disabled","style","marginLeft","connect","ownProps","Footer","FilterLink","input","onSubmit","e","content","preventDefault","value","trim","method","headers","Accept","body","JSON","stringify","ref","node","Todo","textDecoration","TodoList","this","props","toggleTodo","key","updateTodo","React","Component","getVisibleTodos","t","Error","todoItemId","App","VisibleTodoList","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","document","getElementById"],"mappings":"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","file":"static/js/main.bf7263b3.chunk.js","sourcesContent":["const initialState = {\r\n  isFetching: false,\r\n  todos: []\r\n}\r\n\r\nconst todos = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'REQUEST_TODOS':\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    case 'RECEIVE_TODOS':\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        todos: action.todos\r\n      }\r\n    case 'TOGGLE_TODO':\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map(todo =>\r\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n        )\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default todos","let nextTodoId = 0;\r\nexport const addTodo = (content) => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodoId++,\r\n  content,\r\n});\r\n\r\nexport const requestPostTodos = () => ({\r\n  type: \"REQUEST_POST_TODOS\",\r\n});\r\n\r\nexport const receivePostTodos = () => ({\r\n  type: \"RECEIVE_POST_TODOS\",\r\n});\r\n\r\nexport const postTodo = (content) => (dispatch) => {\r\n  dispatch(requestPostTodos());\r\n  return fetch(\"https://lit-ridge-37859.herokuapp.com/create-todo\", {\r\n    method: \"post\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      content,\r\n      completed: false,\r\n    }),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((todos) => {\r\n      dispatch(receivePostTodos());\r\n      return dispatch(fetchTodos());\r\n    });\r\n};\r\n\r\nexport const requestUpdateTodos = () => ({\r\n  type: \"REQUEST_UPDATE_TODOS\",\r\n});\r\n\r\nexport const receiveUpdateTodos = () => ({\r\n  type: \"RECEIVE_UPDATE_TODOS\",\r\n});\r\n\r\nexport const updateTodo = (id, completed) => (dispatch) => {\r\n  requestUpdateTodos();\r\n  return fetch(\"https://lit-ridge-37859.herokuapp.com/update-todo\", {\r\n    method: \"put\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      todoItemId: id,\r\n      completed: !completed,\r\n    }),\r\n  })\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((todos) => {\r\n      receiveUpdateTodos();\r\n      return dispatch(fetchTodos());\r\n    });\r\n};\r\n\r\nexport const setVisibilityFilter = (filter) => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter,\r\n});\r\n\r\nexport const requestTodos = () => ({\r\n  type: \"REQUEST_TODOS\",\r\n});\r\n\r\nexport const receiveTodos = (todos) => ({\r\n  type: \"RECEIVE_TODOS\",\r\n  todos,\r\n});\r\n\r\nexport const fetchTodos = () => (dispatch) => {\r\n  dispatch(requestTodos());\r\n  return fetch(\"https://lit-ridge-37859.herokuapp.com/retrieve-todo\")\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((todos) => {\r\n      return dispatch(receiveTodos(todos));\r\n    });\r\n};\r\n\r\nexport const toggleTodo = (id) => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id,\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\r\n};\r\n","import { VisibilityFilters } from '../actions'\r\n\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibilityFilter","import { combineReducers } from 'redux'\r\nimport todos from './todos'\r\nimport visibilityFilter from './visibilityFilter'\r\n\r\nexport default combineReducers({\r\n  todos,\r\n  visibilityFilter\r\n})","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\n\r\nimport rootReducer from './reducers'\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport default () => createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n);","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Link = ({ active, children, onClick }) => (\r\n    <button\r\n        onClick={onClick}\r\n        disabled={active}\r\n        style={{\r\n            marginLeft: '4px'\r\n        }}\r\n    >\r\n        {children}\r\n    </button>\r\n)\r\n\r\nLink.propTypes = {\r\n    active: PropTypes.bool.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Link","import { connect } from 'react-redux'\r\nimport { setVisibilityFilter } from '../actions'\r\nimport Link from '../components/Link'\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  active: ownProps.filter === state.visibilityFilter\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Link)","import React from 'react'\r\nimport FilterLink from '../containers/FilterLink'\r\nimport { VisibilityFilters } from '../actions'\r\n\r\nconst Footer = () => (\r\n    <div>\r\n        <span>Show: </span>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\r\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\r\n    </div>\r\n)\r\n\r\nexport default Footer","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { postTodo } from '../actions'\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault()\r\n          if (!input.value.trim()) {\r\n            return\r\n          }\r\n          dispatch(postTodo(input.value))\r\n          input.value = ''\r\n        }}\r\n      >\r\n        <input ref={node => (input = node)} />\r\n        <button type=\"submit\">Add Todo</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connect()(AddTodo)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Todo = ({ onClick, completed, content }) => (\r\n    <li\r\n        onClick={onClick}\r\n        style={{\r\n            textDecoration: completed ? 'line-through' : 'none'\r\n        }}\r\n    >\r\n        {content}\r\n    </li>\r\n)\r\n\r\nTodo.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n    content: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Todo","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nclass TodoList extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchTodos()\r\n  }\r\n\r\n  render() {\r\n    const { todos, toggleTodo } = this.props;\r\n    return (\r\n      <ul>\r\n        {todos.map(todo => (\r\n          <Todo key={todo.id} {...todo} onClick={() => {\r\n            toggleTodo(todo.id) \r\n            this.props.updateTodo(todo.id, todo.completed)\r\n          }} />\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        completed: PropTypes.bool.isRequired,\r\n        content: PropTypes.string.isRequired\r\n      }).isRequired\r\n    ).isRequired,\r\n    toggleTodo: PropTypes.func.isRequired,\r\n    updateTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import { connect } from 'react-redux'\r\nimport TodoList from '../components/TodoList'\r\nimport { fetchTodos, toggleTodo, VisibilityFilters, updateTodo } from '../actions'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case VisibilityFilters.SHOW_ALL:\r\n      return todos\r\n    case VisibilityFilters.SHOW_COMPLETED:\r\n      return todos.filter(t => t.completed)\r\n    case VisibilityFilters.SHOW_ACTIVE:\r\n      return todos.filter(t => !t.completed)\r\n    default:\r\n      throw new Error('Unknown filter: ' + filter)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchTodos: () => dispatch(fetchTodos()),\r\n  toggleTodo: id => {\r\n    dispatch(toggleTodo(id))\r\n  },\r\n  updateTodo: (id, completed) => {\r\n    dispatch(updateTodo(id, completed))\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)","import React from 'react'\r\nimport Footer from './Footer'\r\nimport AddTodo from '../containers/AddTodo'\r\nimport VisibleTodoList from '../containers/VisibleTodoList'\r\n\r\nconst App = () => (\r\n  <div>\r\n    <AddTodo />\r\n    <VisibleTodoList />\r\n    <Footer />\r\n  </div>\r\n)\r\n\r\nexport default App","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './configureStore'\r\nimport App from './components/App'\r\n\r\nconst store = configureStore()\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}